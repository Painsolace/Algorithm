package leetcode;

/**
 * Created by HAOYUXING on 2020/7/10.
 */
public class Solution289 {

    /**
     * 根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
     *
     * 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
     *
     * 如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
     * 如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
     * 如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
     * 如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
     *
     * 根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。
     *
     *
     * 示例：
     *
     * 输入：
     * [
     *   [0,1,0],
     *   [0,0,1],
     *   [1,1,1],
     *   [0,0,0]
     * ]
     * 输出：
     * [
     *   [0,0,0],
     *   [1,0,1],
     *   [0,1,1],
     *   [0,1,0]
     * ]
     *  
     *
     * 进阶：
     *
     * 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
     * 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
     *
     * 链接：https://leetcode-cn.com/problems/game-of-life
     */


    // 分析发现本题必须使用旧的状态才能判断出新的， 又要使用旧的，又要保存新的值，还得使用原地算法
    // 怎么做呢? 可以扩充元素的信息量，一个值同时表示旧的和新的， 所以原来的0和1就不够了
    // 使用两位来表示这几种状态， 0位表示上一个状态，1位表示下一个状态
    // 00  死 -> 死    0
    // 01  活 -> 死    1
    // 10  死 -> 活    2
    // 11  活 -> 活    3
    public void gameOfLife(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int n = calcliveNum(board, i, j);
                // 上一轮是活的
                if ((board[i][j] & 1) == 1) {
                    if (n < 2 || n > 3) {
                        board[i][j] = 1;
                    } else if (n == 2 || n == 3) {
                        board[i][j] = 3;
                    }
                } else if (n == 3) {
                    board[i][j] = 2;
                }
            }
        }
        // 还原， 右移一位
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = board[i][j] >> 1;
            }
        }
    }

    private int calcliveNum(int[][] board, int i, int j) {
        int x = board.length;
        int y = board[0].length;

        int live = 0;
        if (j + 1 < y && (board[i][j + 1] & 1) == 1) {
            live++;
        }
        if (j - 1 >= 0 && (board[i][j - 1] & 1) == 1) {
            live++;
        }
        if (i + 1 < x && (board[i + 1][j] & 1) == 1) {
            live++;
        }
        if (i - 1 >= 0 && (board[i - 1][j] & 1) == 1) {
            live++;
        }
        if (i - 1 >= 0 && j - 1 >= 0 && (board[i - 1][j - 1] & 1) == 1) {
            live++;
        }
        if (i - 1 >= 0 && j + 1 < y && (board[i - 1][j + 1] & 1) == 1) {
            live++;
        }
        if (i + 1 < x && j - 1 >= 0 && (board[i + 1][j - 1] & 1) == 1) {
            live++;
        }
        if (i + 1 < x && j + 1 < y && (board[i + 1][j + 1] & 1) == 1) {
            live++;
        }
        return live;
    }
}
